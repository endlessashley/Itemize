[{"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/index.js":"1","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/App.js":"2","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/reportWebVitals.js":"3","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Profile.js":"4","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/NovelsList.js":"5","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/TestPagination.js":"6","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/CurrentBooksList.js":"7","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/NonfictionsList.js":"8","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Home.js":"9","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Login.js":"10","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Signup.js":"11","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/Footer/index.js":"12","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/Header/index.js":"13","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Pagination.js":"14","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/utils/mutations.js":"15","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/utils/queries.js":"16","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/utils/auth.js":"17","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/NovelForm/index.js":"18","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/IncompleteNovels/index.js":"19","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/CompleteNovels/index.js":"20","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/NonfictionForm/index.js":"21","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/CompleteNonfiction/index.js":"22","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/CurrentBookForm/index.js":"23","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/IncompleteNonfiction/index.js":"24","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/UserList/index.js":"25","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/usePaginataion.js":"26"},{"size":500,"mtime":1697804779070,"results":"27","hashOfConfig":"28"},{"size":2981,"mtime":1697804779069,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":1697804779071,"results":"30","hashOfConfig":"28"},{"size":1130,"mtime":1697804779071,"results":"31","hashOfConfig":"28"},{"size":7165,"mtime":1697804779071,"results":"32","hashOfConfig":"28"},{"size":1526,"mtime":1697804779071,"results":"33","hashOfConfig":"28"},{"size":5684,"mtime":1697804779070,"results":"34","hashOfConfig":"28"},{"size":7415,"mtime":1697804779071,"results":"35","hashOfConfig":"28"},{"size":677,"mtime":1697804779070,"results":"36","hashOfConfig":"28"},{"size":2522,"mtime":1697804779071,"results":"37","hashOfConfig":"28"},{"size":2702,"mtime":1697804779071,"results":"38","hashOfConfig":"28"},{"size":567,"mtime":1697804779069,"results":"39","hashOfConfig":"28"},{"size":1932,"mtime":1697804779069,"results":"40","hashOfConfig":"28"},{"size":1671,"mtime":1697804779071,"results":"41","hashOfConfig":"28"},{"size":2346,"mtime":1697804779072,"results":"42","hashOfConfig":"28"},{"size":1140,"mtime":1697804779072,"results":"43","hashOfConfig":"28"},{"size":725,"mtime":1697804779071,"results":"44","hashOfConfig":"28"},{"size":3491,"mtime":1697804779070,"results":"45","hashOfConfig":"28"},{"size":4789,"mtime":1697804779069,"results":"46","hashOfConfig":"28"},{"size":4801,"mtime":1697804779069,"results":"47","hashOfConfig":"28"},{"size":3520,"mtime":1697804779070,"results":"48","hashOfConfig":"28"},{"size":4800,"mtime":1697804779069,"results":"49","hashOfConfig":"28"},{"size":3045,"mtime":1697804779069,"results":"50","hashOfConfig":"28"},{"size":4808,"mtime":1697804779069,"results":"51","hashOfConfig":"28"},{"size":1200,"mtime":1697804779070,"results":"52","hashOfConfig":"28"},{"size":2179,"mtime":1697804779071,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"w2khlk",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/index.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/App.js",["121"],"import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Home from './pages/Home';\nimport Profile from './pages/Profile';\nimport Signup from './pages/Signup';\nimport Login from './pages/Login';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport NovelsList from './pages/NovelsList';\n\nimport NonfictionsList from './pages/NonfictionsList'\n\nimport CurrentBooksList from './pages/CurrentBooksList'\n\n\nimport TestPagination from './pages/TestPagination'\n\n\nimport { onError } from \"@apollo/client/link/error\";\n\n// Log any GraphQL errors or network error that occurred\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) =>\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/login\">\n              <Login />\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup />\n            </Route>\n            <Route exact path=\"/me\">\n              <Profile />\n            </Route>\n            <Route exact path=\"/profiles/:id\">\n              <Profile />\n            </Route>\n            <Route exact path=\"/novels/:id\">\n              <NovelsList />\n            </Route>\n\n            <Route exact path = \"/nonfiction/:id\">\n              <NonfictionsList/>\n            </Route>\n\n            <Route exact path = \"/currentbooks/:id\">\n              <CurrentBooksList />\n            </Route>\n\n            <Route exact path = \"/testpagination\">\n              <TestPagination />\n            </Route>\n\n\n\n\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/reportWebVitals.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Profile.js",["122","123"],"import React from 'react';\n\nimport { useQuery } from '@apollo/client';\n\nimport { Link } from 'react-router-dom';\n\nimport {\n  QUERY_SINGLE_USER\n} from '../utils/queries';\n\nimport Auth from '../utils/auth';\n\nconst Profile = () => {\n\n  const { loading, data } = useQuery(\n    QUERY_SINGLE_USER\n\n  );\n  let user;\n\n  if (data) {\n    user = data.user;\n    console.log(user)\n    console.log(user._id)\n  }\n\n\n  return (\n\n<>\n\n  {user? (\n    <>\n    <h2>{user.name}'s Lists:</h2>\n    <div className=\"row\">\n      \n      <div className=\"d-flex align-center justify-center col-sm-12 col-md-3 col-lg-3 profile-card\">\n      <Link to = {`/novels/${user._id}`}>Novels</Link>\n\n      </div>\n      <div className=\"d-flex align-center justify-center col-sm-12 col-md-3 col-lg-3 profile-card\">\n      <Link to = {`/nonfiction/${user._id}`}>Nonfiction</Link>\n\n      </div>\n      <div className=\"d-flex align-center justify-center col-sm-12 col-md-3 col-lg-3 profile-card\">\n      <Link to = {`/currentbooks/${user._id}`}>Current Books</Link>\n      <br/>\n      <br/>\n      </div>\n      \n    </div>\n    </>\n  ):null}\n\n \n\n</>\n\n  );\n};\n\nexport default Profile;\n","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/NovelsList.js",["124","125","126","127","128","129","130","131","132","133"],"import React, { Component, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NOVELS, QUERY_SINGLE_USER } from '../utils/queries';\nimport { UPDATE_NOVEL, REMOVE_NOVEL } from '../utils/mutations';\n\nimport NovelForm from \"../components/NovelForm\";\nimport CompleteNovels from \"../components/CompleteNovels\";\nimport IncompleteNovels from \"../components/IncompleteNovels\";\n\nimport Auth from '../utils/auth';\n\nimport swal from 'sweetalert';\n\n\n\n\nfunction NovelsList(props) {\n    const { loading, data } = useQuery(QUERY_NOVELS);\n    const [formState, setFormState] = useState('');\n    const [showEdit, setShowEdit] = useState(false);\n    const [searchValue, setSearchValue] = useState('')\n    const [showNovelForm, setShowNovelForm] = useState(false)\n    const [showCompleteNovels, setShowCompleteNovels] = useState(false)\n    const [showIncompleteNovels, setShowIncompleteNovels] = useState(false)\n\n    const [removeNovel] = useMutation(REMOVE_NOVEL);\n    const [editNovel, { error }] = useMutation(UPDATE_NOVEL)\n\n    let novels;\n\n\n\n    let result\n\n\n\n\n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n\n      const editAlert = () => {\n        swal({title: \"Entry Updated\", type: \"success\"})\n        // .then(function(){\n        //     window.location.reload();\n        // })\n    }\n\n\n\n    if (data) {\n        novels = data.novels\n        result = data.novels.filter((novel) => novel.owner == Auth.getProfile().data.name) \n        \n\n        console.log(Auth.getProfile().data.name)\n        console.log(result)\n    }\n\n\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n\n\n\n    return (\n        <>\n\n\n                <div className=\"row\">\n                    {result ? (\n                        <>\n             <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowNovelForm(!showNovelForm)}>{showNovelForm ? 'Finished Adding' : 'Add a New Novel'}</button>\n            {showNovelForm && <div className=\"row\"><NovelForm /></div>}\n            <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowCompleteNovels(!showCompleteNovels)}>{showCompleteNovels ? 'Hide Complete Novels' : 'View Complete Novels '}</button>\n            {showCompleteNovels && <div className=\"row\"><CompleteNovels /></div>}\n            <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowIncompleteNovels(!showIncompleteNovels)}>{showIncompleteNovels ? 'Hide Incomplete Novels' : 'View Incomplete Novels'}</button>\n            {showIncompleteNovels && <div className=\"row\"><IncompleteNovels /></div>}\n\n            <div className=\"row\">\n            <div style={{margin: \"20px\"}} className=\"col-12 col-lg-9 text-center\">\n                <h2>Search Novels: </h2>\n                <input\n                type=\"text\"\n                name=\"search\"\n                style={{width: '25vw'}}\n                value={searchValue}\n                onChange={e => setSearchValue(e.target.value)}\n                />\n            </div>\n            </div>\n                                \n                              \n \n                           \n                            {result\n                            .filter(novel => novel.name.match(new RegExp(searchValue, \"i\")) || novel.author.match(new RegExp(searchValue, \"i\")))\n                            .map((novel) => (\n\n                                <div\n                                    key={novel._id}\n                                    className=\"col-sm-12 col-md-3 col-lg-3 card\">\n                                    <p>  {novel.name}\n                                        < br />\n                                        <span className=\"card-subheader\" >by</span> {novel.author}\n                                        < br />\n                                        <span className=\"card-subheader\">Rank:</span> {novel.rank}\n                                        < br />\n                                        <span key={novel.isComplete}>{novel.isComplete}</span>\n                                    </p>\n\n                                    {/* <button className=\"btn btn-dark btn-sm  py-1\" onClick={() => setShowEdit(!showEdit)}>{showEdit ? 'Finished Updating' : 'Update Entry'}</button>\n                                    {showEdit && */}\n                                     <div>\n                                        <form\n                                            onSubmit={e => {\n                                                e.preventDefault();\n                                                editNovel({ variables: { _id: novel._id, isComplete: formState.isComplete } });\n                                               editAlert()\n                                                \n                                            }}\n                                        >\n                                            <select value={formState.isComplete}\n                                                onChange={handleChange}\n                                                type=\"isComplete\"\n                                                name=\"isComplete\"\n                                                placeholder=\"Update Completed Status\"\n                                                className=\"form-input w-100 select\">\n                                                <option value=\"Complete\">Complete</option>\n                                                <option value=\"Incomplete\">Incomplete</option>\n                                                <option selected value=\"\" disabled selected>Update Status</option>\n                                                {/* <option selected value=\"N/A\"> Set Status</option> */}\n                                            </select>\n\n\n\n                                            <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                        </form>\n                                    </div>\n                                    {/* } */}\n                                    <div>\n                                        <button className=\"btn btn-sm btn-primary py-1\"\n                                            type=\"submit\"\n                                            onClick={() => {\n                                                \n                                                removeNovel({ variables: {_id: novel._id } })\n                                                removeAlert()\n                                                // props.reload();\n                                            }}>Remove Entry</button>\n                                    </div>\n\n\n\n                                </div>\n\n\n\n\n\n\n                            ))}\n\n                        </>\n                    ) : null}\n                </div>\n\n        </>\n    );\n}\n\n\nexport default NovelsList;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/TestPagination.js",["134","135","136","137"],"\n   \nimport React, { useState, useMemo } from 'react';\nimport Pagination from './Pagination';\n// import data from '../mock-data.json'\n// import './style.scss';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NOVELS, QUERY_SINGLE_USER } from '../utils/queries';\n\nlet PageSize = 10;\nlet novels\n\nexport default function App() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const { loading, data } = useQuery(QUERY_NOVELS);\n\nif(data) {\n  novels = data.novels\n  console.log(novels)\n  \n}\nvar allNovels = [];\n\n// Populate users array\nfor(var key in novels) {\n    allNovels.push(novels[key]);\n    console.log(key)\n}\n\n\n\n  const currentTableData = useMemo(() => {\n    const firstPageIndex = (currentPage - 1) * PageSize;\n    const lastPageIndex = firstPageIndex + PageSize;\n    return allNovels.slice(firstPageIndex, lastPageIndex);\n  }, [currentPage]);\n\n  return (\n    <>\n    <div>hello</div>\n      <table>\n\n        <tbody>\n          {currentTableData.map(item => {\n            \n            return (\n              <tr>\n                <td>{item.name}</td>\n                <td>{item.author}</td>\n                <td>{item.rank}</td>\n                <td>{item.isComplete}</td>\n                \n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      <Pagination\n        className=\"pagination-bar\"\n        currentPage={currentPage}\n        totalCount={allNovels.length}\n        pageSize={PageSize}\n        onPageChange={page => setCurrentPage(page)}\n      />\n    </>\n  );\n}","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/CurrentBooksList.js",["138","139","140","141","142","143","144"],"import React, { Component, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_CURRENT_BOOKS, QUERY_SINGLE_USER } from '../utils/queries';\nimport { UPDATE_CURRENT_BOOK, REMOVE_CURRENT_BOOK } from '../utils/mutations';\n\nimport CurrentBookForm from \"../components/CurrentBookForm\";\n\n\nimport Auth from '../utils/auth';\n\nimport swal from 'sweetalert';\n\n\n\n\nfunction CurrentBooksList(props) {\n    const { loading, data } = useQuery(QUERY_CURRENT_BOOKS);\n    const [formState, setFormState] = useState('');\n;\n    const [searchValue, setSearchValue] = useState('')\n    const [showCurrentBookForm, setShowCurrentBookForm] = useState(false)\n\n\n    const [removeCurrentBook] = useMutation(REMOVE_CURRENT_BOOK);\n    const [editCurrentBook, { error }] = useMutation(UPDATE_CURRENT_BOOK)\n\n    let currentBooks;\n\n\n\n    let result\n\n\n\n\n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n\n      const editAlert = () => {\n        swal({title: \"Entry Updated\", type: \"success\"})\n        // .then(function(){\n        //     window.location.reload();\n        // })\n    }\n\n\n\n    if (data) {\n        currentBooks = data.currentBooks\n        result = data.currentBooks.filter((currentBook) => currentBook.owner == Auth.getProfile().data.name) \n        \n\n        console.log(Auth.getProfile().data.name)\n        console.log(result)\n    }\n\n\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n\n\n\n    return (\n        <>\n\n\n                <div className=\"row\">\n                    {result ? (\n                        <>\n             <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowCurrentBookForm(!showCurrentBookForm)}>{showCurrentBookForm ? 'Finished Adding' : 'Add a New Current Book'}</button>\n            {showCurrentBookForm && <div className=\"row\"><CurrentBookForm /></div>}\n \n\n            <div className=\"row\">\n            <div style={{margin: \"20px\"}} className=\"col-12 col-lg-9 text-center\">\n                <h2>Search Current Books: </h2>\n                <input\n                type=\"text\"\n                name=\"search\"\n                style={{width: '25vw'}}\n                value={searchValue}\n                onChange={e => setSearchValue(e.target.value)}\n                />\n            </div>\n            </div>\n                                \n                              \n \n                           \n                            {result\n                            .filter(currentBook => currentBook.name.match(new RegExp(searchValue, \"i\")) )\n                            .map((currentBook) => (\n\n                                <div\n                                    key={currentBook._id}\n                                    className=\"col-sm-12 col-md-4 col-lg-4 card\">\n                                    <p>  {currentBook.name}\n                                        < br />\n                                        <span className=\"card-subheader\" >Pages Read:</span> {currentBook.pagesRead}/{currentBook.totalPages}\n                                        < br />\n\n                                 \n                                    </p>\n\n                                    {/* <button className=\"btn btn-dark btn-sm  py-1\" onClick={() => setShowEdit(!showEdit)}>{showEdit ? 'Finished Updating' : 'Update Entry'}</button>\n                                    {showEdit && */}\n                                     <div>\n                                        <form\n                                            onSubmit={e => {\n                                                e.preventDefault();\n                                                editCurrentBook({ variables: { _id: currentBook._id, pagesRead: formState.pagesRead } });\n                                               editAlert()\n                                                \n                                            }}\n                                        >\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"pagesRead\"\n              placeholder=\"Pages Read\"\n              value={formState.pagesRead}\n              type=\"pagesRead\"\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n\n\n\n                                            <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                        </form>\n                                    </div>\n                                    {/* } */}\n                                    <div>\n                                        <button className=\"btn btn-sm btn-primary py-1\"\n                                            type=\"submit\"\n                                            onClick={() => {\n                                                \n                                                removeCurrentBook({ variables: {_id: currentBook._id } })\n                                                removeAlert()\n                                                // props.reload();\n                                            }}>Remove Entry</button>\n                                    </div>\n\n\n\n                                </div>\n\n\n\n\n\n\n                            ))}\n\n                        </>\n                    ) : null}\n                </div>\n\n        </>\n    );\n}\n\n\nexport default CurrentBooksList;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/NonfictionsList.js",["145","146","147","148","149","150","151","152","153","154"],"import React, { Component, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NONFICTIONS, QUERY_SINGLE_USER } from '../utils/queries';\nimport { UPDATE_NONFICTION, REMOVE_NONFICTION } from '../utils/mutations';\n\nimport NonfictionForm from \"../components/NonfictionForm\";\nimport CompleteNonfiction from \"../components/CompleteNonfiction\";\nimport IncompleteNonfiction from \"../components/IncompleteNonfiction\";\n\nimport Auth from '../utils/auth';\n\nimport swal from 'sweetalert';\n\n\n\nfunction NonfictionsList() {\n    const { loading, data } = useQuery(QUERY_NONFICTIONS);\n    const [formState, setFormState] = useState('');\n    const [showEdit, setShowEdit] = useState(false);\n    const [searchValue, setSearchValue] = useState('')\n    const [showNonfictionForm, setShowNonfictionForm] = useState(false)\n    const [showCompleteNonfiction, setShowCompleteNonfiction] = useState(false)\n    const [showIncompleteNonfiction, setShowIncompleteNonfiction] = useState(false)\n\n    const [removeNonfiction] = useMutation(REMOVE_NONFICTION);\n    const [editNonfiction, { error }] = useMutation(UPDATE_NONFICTION)\n\n    let nonfictions;\n\n\n\n    let result\n\n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n\n      const editAlert = () => {\n        swal({title: \"Entry Updated\", type: \"success\"})\n        // .then(function(){\n        //     window.location.reload();\n        // })\n    }\n\n\n    if (data) {\n        nonfictions = data.nonfictions\n        result = data.nonfictions.filter((nonfiction) => nonfiction.owner == Auth.getProfile().data.name) \n        \n\n        console.log(Auth.getProfile().data.name)\n        console.log(data.nonfictions)\n        console.log(result)\n    }\n\n\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n\n\n\n    return (\n        <>\n\n\n                <div className=\"row\">\n                    {result ? (\n                        <>\n             <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowNonfictionForm(!showNonfictionForm)}>{showNonfictionForm ? 'Finished Adding' : 'Add New Nonfiction'}</button>\n            {showNonfictionForm && <div className=\"row\"><NonfictionForm /></div>}\n            <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowCompleteNonfiction(!showCompleteNonfiction)}>{showCompleteNonfiction ? 'Hide Complete Nonfiction' : 'View Complete Nonfiction '}</button>\n            {showCompleteNonfiction && <div className=\"row\"><CompleteNonfiction /></div>}\n            <button className=\"btn btn-showme btn-block py-3\" onClick={() => setShowIncompleteNonfiction(!showIncompleteNonfiction)}>{showIncompleteNonfiction ? 'Hide Incomplete Nonfiction' : 'View Incomplete Nonfiction'}</button>\n            {showIncompleteNonfiction && <div className=\"row\"><IncompleteNonfiction /></div>}\n\n            <div className=\"row\">\n            <div style={{margin: \"20px\"}} className=\"col-12 col-lg-9 text-center\">\n                <h2>Search Nonfiction: </h2>\n                <input\n                type=\"text\"\n                name=\"search\"\n                style={{width: '25vw'}}\n                value={searchValue}\n                onChange={e => setSearchValue(e.target.value)}\n                />\n            </div>\n            </div>\n                                \n                              \n \n                           \n                            {result\n                            .filter(nonfiction => nonfiction.name.match(new RegExp(searchValue, \"i\")) || nonfiction.author.match(new RegExp(searchValue, \"i\")))\n                            .map((nonfiction) => (\n\n                                <div\n                                    key={nonfiction._id}\n                                    className=\"col-sm-12 col-md-3 col-lg-3 card\">\n                                    <p>  {nonfiction.name}\n                                        < br />\n                                        <span className=\"card-subheader\" >by</span> {nonfiction.author}\n                                        < br />\n                                        <span className=\"card-subheader\">Rank:</span> {nonfiction.rank}\n                                        < br />\n                                        <span key={nonfiction.isComplete}>{nonfiction.isComplete}</span>\n                                    </p>\n\n                                    {/* <button className=\"btn btn-dark btn-sm  py-1\" onClick={() => setShowEdit(!showEdit)}>{showEdit ? 'Finished Updating' : 'Update Entry'}</button>\n                                    {showEdit && */}\n                                     <div>\n                                        <form\n                                            onSubmit={e => {\n                                                e.preventDefault();\n                                                editNonfiction({ variables: { _id: nonfiction._id, isComplete: formState.isComplete } });\n                                               editAlert()\n                                                \n                                            }}\n                                        >\n                                            <select value={formState.isComplete}\n                                                onChange={handleChange}\n                                                type=\"isComplete\"\n                                                name=\"isComplete\"\n                                                placeholder=\"Update Completed Status\"\n                                                className=\"form-input w-100 select\">\n                                                <option value=\"Complete\">Complete</option>\n                                                <option value=\"Incomplete\">Incomplete</option>\n                                                <option selected value=\"\" disabled selected>Update Status</option>\n                                                {/* <option selected value=\"N/A\"> Set Status</option> */}\n                                            </select>\n\n\n\n                                            <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                        </form>\n                                    </div>\n                                    {/* } */}\n                                    <div>\n                                        <button className=\"btn btn-sm btn-primary py-1\"\n                                            type=\"submit\"\n                                            onClick={() => {\n                                                removeAlert()\n                                                removeNonfiction({ variables: {_id: nonfiction._id } })\n                                               \n                                            }}>Remove Entry</button>\n                                    </div>\n\n\n\n                                </div>\n\n\n\n\n\n\n                            ))}\n\n                        </>\n                    ) : null}\n                </div>\n\n        </>\n    );\n}\n\n\nexport default NonfictionsList;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Home.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Login.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Signup.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/Footer/index.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/Header/index.js",["155","156","157"],"import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport Auth from '../../utils/auth';\nimport { Redirect, useParams } from 'react-router-dom';\nimport logo from '../../utils/itemize-icon.png'\n\nconst Header = () => {\n  const logout = (event) => {\n    event.preventDefault();\n    Auth.logout();\n\n  };\n  return (\n    <header className=\"mb-4 py-3 display-flex align-center\">\n      <div className=\"container flex-column justify-space-between-lg justify-center align-center text-center\">\n        <Link className=\"text-primary\" to=\"/\">\n          <div className=\"row align-center\">\n             <div className=\"col-sm-12 col-md-3 col-lg-3\">\n          {/* <img src=\"./images/itemize-icon.png\" alt=\"itemize logo\"></img> */}\n          <img src={logo} />\n        </div>\n        <div className=\"col-sm-12 col-md-9 col-lg-9\">\n\n          <h2 className=\"m-0\" style={{ fontSize: '2rem', width: '100%' }}>Track Your Progress. <br/> Meet Your Goals.\n          </h2>\n          </div>\n        </div>\n  \n          <br/>\n          <br/>\n        </Link>\n        {/* <p className=\"m-0 text-dark\" style={{ fontSize: '1.75rem', fontWeight: '700' }}>\n          Track your progress. Meet your goals.\n        </p> */}\n        <div>\n          {Auth.loggedIn() ? (\n            <>\n              <Link className=\"btn btn-lg btn-dark m-2\" to=\"/me\">\n                View My Profile\n              </Link>\n              <Link to = \"/\">\n              <button className=\"btn btn-lg btn-primary m-2\" onClick={logout}>Log Out\n              </button>\n              </Link>\n            </>\n          ) : (\n            <>\n              <Link className=\"btn btn-lg btn-primary m-2\" to=\"/login\">\n                Login\n              </Link>\n              <Link className=\"btn btn-lg btn-primary m-2\" to=\"/signup\">\n                Signup\n              </Link>\n            </>\n          )}\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/pages/Pagination.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/utils/mutations.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/utils/queries.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/utils/auth.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/NovelForm/index.js",["158","159"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n// import { useStoreContext } from \"../../utils/GlobalState\";\n\nimport { ADD_NOVEL } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction NovelForm(props) {\n  // const [state, dispatch] = useStoreContext();\n  const [formState, setFormState] = useState({ name: '', author: '', rank: '', isComplete: '' });\n\n\n  const [addNovel, { error }] = useMutation(ADD_NOVEL);\n\n  const addAlert = () => {\n    swal({title: \"Entry Added\", type: \"success\"})\n    .then(function(){\n        window.location.reload();\n    })\n}\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const data = await addNovel({\n        variables: { owner: Auth.getProfile().data.name, name: formState.name, author: formState.author, rank: formState.rank, isComplete: formState.isComplete },\n\n      });\n     \n      addAlert()\n      \n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    console.log(Auth.getProfile().data);\n  };\n\n\n\n\n  return (\n   \n      <>\n\n      {Auth.loggedIn() ? (\n\n        <form\n          className=\"flex-row justify-center justify-space-between-md align-center\"\n          onSubmit={handleFormSubmit}>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"author\"\n              placeholder=\"Author\"\n              value={formState.author}\n              type=\"author\"\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"name\"\n              type=\"name\"\n              placeholder=\"Title\"\n              className=\"form-input w-100\"\n              value={formState.name}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"rank\"\n              placeholder=\"Rank\"\n              type=\"rank\"\n              value={formState.rank}\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <select value={formState.isComplete}\n              onChange={handleChange}\n              type=\"isComplete\"\n              name=\"isComplete\"\n              className=\"form-input w-100\">\n                <option selected value=\"\" disabled selected>Select Completed Status</option>\n              <option value=\"Complete\">Complete</option>\n              <option value=\"Incomplete\">Incomplete</option>\n              \n            </select>\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <button className=\"btn btn-primary btn-block py-2 w-50 mx-auto\" type=\"submit\">\n              Add Novel\n            </button>\n          </div>\n          \n          {error && (\n            <div className=\"col-12 my-3 bg-danger text-white p-3\">\n              Something went wrong...\n            </div>\n          )}\n        </form>\n    \n      ) : (<p>\n        You need to be logged in. Please{' '}\n        <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n      </p>)\n\n      }\n</>\n  )\n}\n\n\nexport default NovelForm;\n","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/IncompleteNovels/index.js",["160","161","162","163","164","165"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NOVELS, QUERY_SINGLE_USER } from '../../utils/queries';\nimport { UPDATE_NOVEL, REMOVE_NOVEL } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction IncompleteNovels() {\n\n    const { loading, data } = useQuery(QUERY_NOVELS);\n    const [showEdit, setShowEdit] = useState(false);\n    const [formState, setFormState] = useState('');\n   \n\n    const [removeNovel] = useMutation(REMOVE_NOVEL);\n\n    let novels;\n    let incomplete;\n\n\n\n    const [editNovel, { error }] = useMutation(UPDATE_NOVEL)\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n    if (data) {\n        novels = data.novels\n        console.log(novels)\n        incomplete = novels.filter(novel => novel.isComplete == \"Incomplete\" && novel.owner == Auth.getProfile().data.name);\n        console.log(incomplete)\n\n\n    }\n\n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n\n      const editAlert = () => {\n        swal({title: \"Entry Updated\", type: \"success\"})\n        // .then(function(){\n        //     window.location.reload();\n        // })\n    }\n    \n\nreturn (\n    <>\n\n\n        <div className=\"row\">\n\n\n            {incomplete ? (\n                <>\n\n                \n                    <h3>Incomplete Novels ({incomplete.length}/{novels.length}):</h3>\n                    {incomplete.map((novel) => (\n\n\n                        <div\n                            key={novel._id}\n\n                            className=\"col-sm-12 col-md-3 col-lg-3 card\"\n                 \n\n                        >\n                            <p>  {novel.name}\n                                < br />\n                                <span className=\"card-subheader\" >by</span> {novel.author}\n                                < br />\n                                <span className=\"card-subheader\">Rank:</span> {novel.rank}\n                                < br />\n                                <span key={novel.isComplete}\n                                    >\n                                    {novel.isComplete}</span>\n                            </p>\n                            <button className=\"btn btn-dark btn-sm  py-1\" onClick={() => setShowEdit(!showEdit)}>{showEdit ? 'Finished Updating' : 'Update Entry'}</button>\n                            {showEdit && <div>\n                                <form\n\n\n                                    onSubmit={e => {\n                        \n                                        e.preventDefault();\n                                        editAlert()\n                                        editNovel({ variables: { _id: novel._id, isComplete: formState.isComplete } });\n                                       \n                                    }}\n                                >\n                                    <select value={formState.isComplete}\n                                        onChange={handleChange}\n                                        type=\"isComplete\"\n                                        name=\"isComplete\"\n                                        placeholder=\"Update Completed Status\"\n                                        className=\"form-input w-100 select\">\n                                        <option value=\"Complete\">Complete</option>\n                                        <option value=\"Incomplete\">Incomplete</option>\n                                        <option selected value=\"N/A\"> Set Status</option>\n                                    </select>\n\n\n\n                                    <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                </form>\n                            </div>}\n                            <div>\n                                <button className=\"btn btn-sm btn-primary py-1\"\n                                    type=\"submit\"\n                                    onClick={() => {\n                                        removeAlert()\n                                        removeNovel({ variables: { _id: novel._id } })\n                                        \n                                    }}>Remove Entry</button>\n                            </div>\n\n\n\n                        </div>\n\n\n\n\n\n\n                    ))}\n                \n                </>\n            ) : null}\n            \n\n\n\n        </div>\n\n    </>\n);\n}\n\n\nexport default IncompleteNovels;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/CompleteNovels/index.js",["166","167","168","169","170","171","172","173"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NOVELS, QUERY_SINGLE_USER } from '../../utils/queries';\nimport { UPDATE_NOVEL, REMOVE_NOVEL } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction CompleteNovels() {\n\n    const { loading, data } = useQuery(QUERY_NOVELS);\n    const [showEdit, setShowEdit] = useState(false);\n    const [formState, setFormState] = useState('');\n    const [showComplete, setShowComplete] = useState(false)\n\n    const [removeNovel] = useMutation(REMOVE_NOVEL);\n\n    let novels;\n    let complete;\n\n\n\n    const [editNovel, { error }] = useMutation(UPDATE_NOVEL)\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n    if (data) {\n        novels = data.novels\n        console.log(novels)\n        complete = novels.filter(novel => novel.isComplete == \"Complete\" && novel.owner == Auth.getProfile().data.name);\n        console.log(complete)\n\n\n    }\n\n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n\n      const editAlert = () => {\n        swal({title: \"Entry Updated\", type: \"success\"})\n        // .then(function(){\n        //     window.location.reload();\n        // })\n    }\n    \n\nreturn (\n    <>\n\n\n        <div className=\"row\">\n\n\n            {complete ? (\n                <>\n\n                \n                    <h3>Completed Novels ({complete.length}/{novels.length}):</h3>\n                    {complete.map((novel) => (\n\n\n                        <div\n                            key={novel._id}\n\n                            className=\"col-sm-12 col-md-3 col-lg-3 card\"\n                 \n\n                        >\n                            <p>  {novel.name}\n                                < br />\n                                <span className=\"card-subheader\" >by</span> {novel.author}\n                                < br />\n                                <span className=\"card-subheader\">Rank:</span> {novel.rank}\n                                < br />\n                                <span key={novel.isComplete}\n                                    >\n                                    {novel.isComplete}</span>\n                            </p>\n                            <button className=\"btn btn-dark btn-sm  py-1\" onClick={() => setShowEdit(!showEdit)}>{showEdit ? 'Finished Updating' : 'Update Entry'}</button>\n                            {showEdit && <div>\n                                <form\n\n\n                                    onSubmit={e => {\n                                        e.preventDefault();\n                                        editAlert()\n                                        editNovel({ variables: { _id: novel._id, isComplete: formState.isComplete } });\n                                       \n                                    }}\n                                >\n                                    <select value={formState.isComplete}\n                                        onChange={handleChange}\n                                        type=\"isComplete\"\n                                        name=\"isComplete\"\n                                        placeholder=\"Update Completed Status\"\n                                        className=\"form-input w-100 select\">\n                                        <option value=\"Complete\">Complete</option>\n                                        <option value=\"Incomplete\">Incomplete</option>\n                                        <option selected value=\"N/A\"> Set Status</option>\n                                    </select>\n\n\n\n                                    <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                </form>\n                            </div>}\n                            <div>\n                                <button className=\"btn btn-sm btn-primary py-1\"\n                                    type=\"submit\"\n                                    onClick={() => {\n                                        removeAlert()\n                                        removeNovel({ variables: { _id: novel._id } })\n                                        \n                                    }}>Remove Entry</button>\n                            </div>\n\n\n\n                        </div>\n\n\n\n\n\n\n                    ))}\n                \n                </>\n            ) : null}\n            \n\n\n\n        </div>\n\n    </>\n);\n}\n\n\nexport default CompleteNovels;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/NonfictionForm/index.js",["174","175"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n// import { useStoreContext } from \"../../utils/GlobalState\";\n\nimport { ADD_NONFICTION } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction NonfictionForm(props) {\n  // const [state, dispatch] = useStoreContext();\n  const [formState, setFormState] = useState({ name: '', author: '', rank: '', isComplete: '' });\n\n\n  const [addNonfiction, { error }] = useMutation(ADD_NONFICTION);\n\n  const addAlert = () => {\n    swal({title: \"Entry Added\", type: \"success\"}).then(function(){\n        window.location.reload();\n    })\n}\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const data = await addNonfiction({\n        variables: { owner: Auth.getProfile().data.name, name: formState.name, author: formState.author, rank: formState.rank, isComplete: formState.isComplete },\n\n      });\n     \n      addAlert()\n      \n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    console.log(Auth.getProfile().data);\n  };\n\n\n\n\n  return (\n   \n      <>\n\n      {Auth.loggedIn() ? (\n\n        <form\n          className=\"flex-row justify-center justify-space-between-md align-center\"\n          onSubmit={handleFormSubmit}>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"author\"\n              placeholder=\"Author\"\n              value={formState.author}\n              type=\"author\"\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"name\"\n              type=\"name\"\n              placeholder=\"Title\"\n              className=\"form-input w-100\"\n              value={formState.name}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"rank\"\n              placeholder=\"Rank\"\n              type=\"rank\"\n              value={formState.rank}\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <select value={formState.isComplete}\n              onChange={handleChange}\n              type=\"isComplete\"\n              name=\"isComplete\"\n              className=\"form-input w-100\">\n                <option selected value=\"\" disabled selected>Select Completed Status</option>\n              <option value=\"Complete\">Complete</option>\n              <option value=\"Incomplete\">Incomplete</option>\n              \n            </select>\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <button className=\"btn btn-primary btn-block py-2 w-50 mx-auto\" type=\"submit\">\n              Add Nonfiction\n            </button>\n          </div>\n          \n          {error && (\n            <div className=\"col-12 my-3 bg-danger text-white p-3\">\n              Something went wrong...\n            </div>\n          )}\n        </form>\n    \n      ) : (<p>\n        You need to be logged in. Please{' '}\n        <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n      </p>)\n\n      }\n</>\n  )\n}\n\n\nexport default NonfictionForm;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/CompleteNonfiction/index.js",["176","177","178","179","180","181","182","183","184","185"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NONFICTIONS, QUERY_SINGLE_USER } from '../../utils/queries';\nimport { UPDATE_NONFICTION, REMOVE_NONFICTION } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction CompleteNonfiction() {\n\n    const { loading, data } = useQuery(QUERY_NONFICTIONS);\n    const [showEdit, setShowEdit] = useState(false);\n    const [formState, setFormState] = useState('');\n    const [showComplete, setShowComplete] = useState(false)\n\n    const [removeNonfiction] = useMutation(REMOVE_NONFICTION);\n\n    let nonfictions;\n    let complete;\n\n\n\n    const [editNonfiction, { error }] = useMutation(UPDATE_NONFICTION)\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n    if (data) {\n        nonfictions = data.nonfictions\n        console.log(nonfictions)\n        complete = nonfictions.filter(nonfiction => nonfiction.isComplete == \"Complete\" && nonfiction.owner == Auth.getProfile().data.name);\n        console.log(complete)\n\n\n    }\n\n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n    \n      const editAlert = () => {\n          swal({title: \"Entry Updated\", type: \"success\"})\n        //   .then(function(){\n        //       window.location.reload();\n        //   })\n      }\n\nreturn (\n    <>\n\n\n        <div className=\"row\">\n\n\n            {complete ? (\n                <>\n\n                \n                    <h3>Completed Nonfiction ({complete.length}/{nonfictions.length}):</h3>\n                    {complete.map((nonfiction) => (\n\n\n                        <div\n                            key={nonfiction._id}\n\n                            className=\"col-sm-12 col-md-3 col-lg-3 card\"\n                 \n\n                        >\n                            <p>  {nonfiction.name}\n                                < br />\n                                <span className=\"card-subheader\" >by</span> {nonfiction.author}\n                                < br />\n                                <span className=\"card-subheader\">Rank:</span> {nonfiction.rank}\n                                < br />\n                                <span key={nonfiction.isComplete}\n                                    >\n                                    {nonfiction.isComplete}</span>\n                            </p>\n                      \n                            <div>\n                                <form\n\n\n                                    onSubmit={e => {\n                                        e.preventDefault();\n                                        editAlert()\n                                        editNonfiction({ variables: { _id: nonfiction._id, isComplete: formState.isComplete } });\n                                        \n                                    }}\n                                >\n                                    <select value={formState.isComplete}\n                                        onChange={handleChange}\n                                        type=\"isComplete\"\n                                        name=\"isComplete\"\n                                        placeholder=\"Update Completed Status\"\n                                        className=\"form-input w-100 select\">\n                                        <option value=\"Complete\">Complete</option>\n                                        <option value=\"Incomplete\">Incomplete</option>\n                                        <option selected value=\"N/A\"> Set Status</option>\n                                    </select>\n\n\n\n                                    <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                </form>\n                            </div>\n                            <div>\n                                <button className=\"btn btn-sm btn-primary py-1\"\n                                    type=\"submit\"\n                                    onClick={() => {\n                                        removeAlert()\n                                        removeNonfiction({ variables: { _id: nonfiction._id } })\n                                        \n                                    }}>Remove Entry</button>\n                            </div>\n\n\n\n                        </div>\n\n\n\n\n\n\n                    ))}\n                \n                </>\n            ) : null}\n            \n\n\n\n        </div>\n\n    </>\n);\n}\n\n\nexport default CompleteNonfiction;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/CurrentBookForm/index.js",["186"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n// import { useStoreContext } from \"../../utils/GlobalState\";\n\nimport { ADD_CURRENT_BOOK } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction CurrentBookForm(props) {\n  // const [state, dispatch] = useStoreContext();\n  const [formState, setFormState] = useState({ name: '', totalPages: '', pagesRead: ''});\n\n\n  const [addCurrentBook, { error }] = useMutation(ADD_CURRENT_BOOK);\n\n  const addAlert = () => {\n    swal({title: \"Entry Added\", type: \"success\"}).then(function(){\n        window.location.reload();\n    })\n}\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const data = await addCurrentBook({\n        variables: { owner: Auth.getProfile().data.name, name: formState.name, totalPages: formState.totalPages, pagesRead: formState.pagesRead},\n\n      });\n     \n      addAlert()\n      \n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n    console.log(Auth.getProfile().data);\n  };\n\n\n\n\n  return (\n   \n      <>\n\n      {Auth.loggedIn() ? (\n\n        <form\n          className=\"flex-row justify-center justify-space-between-md align-center\"\n          onSubmit={handleFormSubmit}>\n                      <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"name\"\n              type=\"name\"\n              placeholder=\"Title\"\n              className=\"form-input w-100\"\n              value={formState.name}\n              onChange={handleChange}\n            />\n          </div>\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"pagesRead\"\n              placeholder=\"Pages Read\"\n              value={formState.pagesRead}\n              type=\"pagesRead\"\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <input\n              name=\"totalPages\"\n              placeholder=\"Total Pages\"\n              type=\"totalPages\"\n              value={formState.totalPages}\n              className=\"form-input w-100\"\n              onChange={handleChange}\n            />\n          </div>\n\n          <div className=\"col-12 col-lg-9 mx-auto\">\n            <button className=\"btn btn-primary btn-block py-2 w-50 mx-auto\" type=\"submit\">\n              Add CurrentBook\n            </button>\n          </div>\n          \n          {error && (\n            <div className=\"col-12 my-3 bg-danger text-white p-3\">\n              Something went wrong...\n            </div>\n          )}\n        </form>\n    \n      ) : (<p>\n        You need to be logged in. Please{' '}\n        <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n      </p>)\n\n      }\n</>\n  )\n}\n\n\nexport default CurrentBookForm;\n","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/IncompleteNonfiction/index.js",["187","188","189","190","191","192","193","194","195","196"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_NONFICTIONS, QUERY_SINGLE_USER } from '../../utils/queries';\nimport { UPDATE_NONFICTION, REMOVE_NONFICTION } from '../../utils/mutations';\nimport Auth from '../../utils/auth';\n\nimport swal from 'sweetalert';\n\nfunction IncompleteNonfiction() {\n\n    const { loading, data } = useQuery(QUERY_NONFICTIONS);\n    const [showEdit, setShowEdit] = useState(false);\n    const [formState, setFormState] = useState('');\n    const [showComplete, setShowComplete] = useState(false)\n\n    const [removeNonfiction] = useMutation(REMOVE_NONFICTION);\n\n    let nonfictions;\n    let incomplete;\n\n\n\n    const [editNonfiction, { error }] = useMutation(UPDATE_NONFICTION)\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n\n        setFormState({\n            ...formState,\n            [name]: value,\n        });\n\n        console.log(formState)\n    };\n\n    if (data) {\n        nonfictions = data.nonfictions\n        console.log(nonfictions)\n        incomplete = nonfictions.filter(nonfiction => nonfiction.isComplete == \"Incomplete\" && nonfiction.owner == Auth.getProfile().data.name);\n        console.log(incomplete)\n\n\n    }\n    \n    const removeAlert = () => {\n        swal({title: \"Entry Removed\", type: \n        \"success\"}).then(function(){ \n           window.location.reload();\n           }\n        );\n      }\n\n      const editAlert = () => {\n        swal({title: \"Entry Updated\", type: \"success\"})\n        // .then(function(){\n        //     window.location.reload();\n        // })\n    }\n\nreturn (\n    <>\n\n\n        <div className=\"row\">\n\n\n            {incomplete ? (\n                <>\n\n                \n                    <h3>Completed Nonfiction ({incomplete.length}/{nonfictions.length}):</h3>\n                    {incomplete.map((nonfiction) => (\n\n\n                        <div\n                            key={nonfiction._id}\n\n                            className=\"col-sm-12 col-md-3 col-lg-3 card\"\n                 \n\n                        >\n                            <p>  {nonfiction.name}\n                                < br />\n                                <span className=\"card-subheader\" >by</span> {nonfiction.author}\n                                < br />\n                                <span className=\"card-subheader\">Rank:</span> {nonfiction.rank}\n                                < br />\n                                <span key={nonfiction.isComplete}\n                                    >\n                                    {nonfiction.isComplete}</span>\n                            </p>\n                      \n                            <div>\n                                <form\n\n\n                                    onSubmit={e => {\n                                        e.preventDefault();\n                                        editAlert()\n                                        editNonfiction({ variables: { _id: nonfiction._id, isComplete: formState.isComplete } });\n                                        \n                                    }}\n                                >\n                                    <select value={formState.isComplete}\n                                        onChange={handleChange}\n                                        type=\"isComplete\"\n                                        name=\"isComplete\"\n                                        placeholder=\"Update Completed Status\"\n                                        className=\"form-input w-100 select\">\n                                        <option value=\"Complete\">Complete</option>\n                                        <option value=\"Incomplete\">Incomplete</option>\n                                        <option selected value=\"N/A\"> Set Status</option>\n                                    </select>\n\n\n\n                                    <button className=\"btn btn-dark btn-sm  py-1\" type=\"submit\">Submit</button>\n                                </form>\n                            </div>\n                            <div>\n                                <button className=\"btn btn-sm btn-primary py-1\"\n                                    type=\"submit\"\n                                    onClick={() => {\n                                        removeAlert()\n                                        removeNonfiction({ variables: { _id: nonfiction._id } })\n                                        \n                                    }}>Remove Entry</button>\n                            </div>\n\n\n\n                        </div>\n\n\n\n\n\n\n                    ))}\n                \n                </>\n            ) : null}\n            \n\n\n\n        </div>\n\n    </>\n);\n}\n\n\nexport default IncompleteNonfiction;","/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/components/UserList/index.js",[],"/Users/ashleytate/Desktop/Itemize-1/itemize/client/src/usePaginataion.js",["197"],"\n   \nimport React from 'react';\nimport { useMemo } from 'react';\n\nexport const DOTS = '...';\n\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({ length }, (_, idx) => idx + start);\n};\n\nexport const usePagination = ({\n  totalCount,\n  pageSize,\n  siblingCount = 1,\n  currentPage\n}) => {\n  const paginationRange = useMemo(() => {\n    const totalPageCount = Math.ceil(totalCount / pageSize);\n\n    // Pages count is determined as siblingCount + firstPage + lastPage + currentPage + 2*DOTS\n    const totalPageNumbers = siblingCount + 5;\n\n    /*\n      If the number of pages is less than the page numbers we want to show in our\n      paginationComponent, we return the range [1..totalPageCount]\n    */\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(\n      currentPage + siblingCount,\n      totalPageCount\n    );\n\n    /*\n      We do not want to show dots if there is only one position left \n      after/before the left/right page count as that would lead to a change if our Pagination\n      component size which we do not want\n    */\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex < totalPageCount - 2;\n\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n\n      return [...leftRange, DOTS, totalPageCount];\n    }\n\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(\n        totalPageCount - rightItemCount + 1,\n        totalPageCount\n      );\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalCount, pageSize, siblingCount, currentPage]);\n\n  return paginationRange;\n};\n",{"ruleId":"198","severity":1,"message":"199","line":30,"column":7,"nodeType":"200","messageId":"201","endLine":30,"endColumn":16},{"ruleId":"198","severity":1,"message":"202","line":11,"column":8,"nodeType":"200","messageId":"201","endLine":11,"endColumn":12},{"ruleId":"198","severity":1,"message":"203","line":15,"column":11,"nodeType":"200","messageId":"201","endLine":15,"endColumn":18},{"ruleId":"198","severity":1,"message":"204","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":41},{"ruleId":"198","severity":1,"message":"203","line":20,"column":13,"nodeType":"200","messageId":"201","endLine":20,"endColumn":20},{"ruleId":"198","severity":1,"message":"207","line":22,"column":12,"nodeType":"200","messageId":"201","endLine":22,"endColumn":20},{"ruleId":"198","severity":1,"message":"208","line":22,"column":22,"nodeType":"200","messageId":"201","endLine":22,"endColumn":33},{"ruleId":"198","severity":1,"message":"209","line":29,"column":25,"nodeType":"200","messageId":"201","endLine":29,"endColumn":30},{"ruleId":"198","severity":1,"message":"210","line":58,"column":9,"nodeType":"200","messageId":"201","endLine":58,"endColumn":15},{"ruleId":"211","severity":1,"message":"212","line":59,"column":60,"nodeType":"213","messageId":"214","endLine":59,"endColumn":62},{"ruleId":"215","severity":1,"message":"216","line":147,"column":84,"nodeType":"217","messageId":"218","endLine":147,"endColumn":92},{"ruleId":"198","severity":1,"message":"219","line":8,"column":20,"nodeType":"200","messageId":"201","endLine":8,"endColumn":31},{"ruleId":"198","severity":1,"message":"206","line":9,"column":24,"nodeType":"200","messageId":"201","endLine":9,"endColumn":41},{"ruleId":"198","severity":1,"message":"203","line":16,"column":11,"nodeType":"200","messageId":"201","endLine":16,"endColumn":18},{"ruleId":"220","severity":1,"message":"221","line":37,"column":6,"nodeType":"222","endLine":37,"endColumn":19,"suggestions":"223"},{"ruleId":"198","severity":1,"message":"204","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":31,"nodeType":"200","messageId":"201","endLine":5,"endColumn":48},{"ruleId":"198","severity":1,"message":"203","line":19,"column":13,"nodeType":"200","messageId":"201","endLine":19,"endColumn":20},{"ruleId":"198","severity":1,"message":"209","line":27,"column":31,"nodeType":"200","messageId":"201","endLine":27,"endColumn":36},{"ruleId":"198","severity":1,"message":"224","line":56,"column":9,"nodeType":"200","messageId":"201","endLine":56,"endColumn":21},{"ruleId":"211","severity":1,"message":"212","line":57,"column":78,"nodeType":"213","messageId":"214","endLine":57,"endColumn":80},{"ruleId":"198","severity":1,"message":"204","line":1,"column":17,"nodeType":"200","messageId":"201","endLine":1,"endColumn":26},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":29,"nodeType":"200","messageId":"201","endLine":5,"endColumn":46},{"ruleId":"198","severity":1,"message":"203","line":19,"column":13,"nodeType":"200","messageId":"201","endLine":19,"endColumn":20},{"ruleId":"198","severity":1,"message":"207","line":21,"column":12,"nodeType":"200","messageId":"201","endLine":21,"endColumn":20},{"ruleId":"198","severity":1,"message":"208","line":21,"column":22,"nodeType":"200","messageId":"201","endLine":21,"endColumn":33},{"ruleId":"198","severity":1,"message":"209","line":28,"column":30,"nodeType":"200","messageId":"201","endLine":28,"endColumn":35},{"ruleId":"198","severity":1,"message":"225","line":53,"column":9,"nodeType":"200","messageId":"201","endLine":53,"endColumn":20},{"ruleId":"211","severity":1,"message":"212","line":54,"column":75,"nodeType":"213","messageId":"214","endLine":54,"endColumn":77},{"ruleId":"215","severity":1,"message":"216","line":143,"column":84,"nodeType":"217","messageId":"218","endLine":143,"endColumn":92},{"ruleId":"198","severity":1,"message":"226","line":5,"column":10,"nodeType":"200","messageId":"201","endLine":5,"endColumn":18},{"ruleId":"198","severity":1,"message":"227","line":5,"column":20,"nodeType":"200","messageId":"201","endLine":5,"endColumn":29},{"ruleId":"228","severity":1,"message":"229","line":21,"column":11,"nodeType":"230","endLine":21,"endColumn":29},{"ruleId":"198","severity":1,"message":"231","line":29,"column":13,"nodeType":"200","messageId":"201","endLine":29,"endColumn":17},{"ruleId":"215","severity":1,"message":"216","line":99,"column":52,"nodeType":"217","messageId":"218","endLine":99,"endColumn":60},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":41},{"ruleId":"198","severity":1,"message":"203","line":13,"column":13,"nodeType":"200","messageId":"201","endLine":13,"endColumn":20},{"ruleId":"198","severity":1,"message":"209","line":25,"column":25,"nodeType":"200","messageId":"201","endLine":25,"endColumn":30},{"ruleId":"211","severity":1,"message":"212","line":41,"column":62,"nodeType":"213","messageId":"214","endLine":41,"endColumn":64},{"ruleId":"211","severity":1,"message":"212","line":41,"column":93,"nodeType":"213","messageId":"214","endLine":41,"endColumn":95},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":24,"nodeType":"200","messageId":"201","endLine":5,"endColumn":41},{"ruleId":"198","severity":1,"message":"203","line":13,"column":13,"nodeType":"200","messageId":"201","endLine":13,"endColumn":20},{"ruleId":"198","severity":1,"message":"232","line":16,"column":12,"nodeType":"200","messageId":"201","endLine":16,"endColumn":24},{"ruleId":"198","severity":1,"message":"233","line":16,"column":26,"nodeType":"200","messageId":"201","endLine":16,"endColumn":41},{"ruleId":"198","severity":1,"message":"209","line":25,"column":25,"nodeType":"200","messageId":"201","endLine":25,"endColumn":30},{"ruleId":"211","severity":1,"message":"212","line":41,"column":60,"nodeType":"213","messageId":"214","endLine":41,"endColumn":62},{"ruleId":"211","severity":1,"message":"212","line":41,"column":89,"nodeType":"213","messageId":"214","endLine":41,"endColumn":91},{"ruleId":"198","severity":1,"message":"231","line":28,"column":13,"nodeType":"200","messageId":"201","endLine":28,"endColumn":17},{"ruleId":"215","severity":1,"message":"216","line":98,"column":52,"nodeType":"217","messageId":"218","endLine":98,"endColumn":60},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":29,"nodeType":"200","messageId":"201","endLine":5,"endColumn":46},{"ruleId":"198","severity":1,"message":"203","line":13,"column":13,"nodeType":"200","messageId":"201","endLine":13,"endColumn":20},{"ruleId":"198","severity":1,"message":"207","line":14,"column":12,"nodeType":"200","messageId":"201","endLine":14,"endColumn":20},{"ruleId":"198","severity":1,"message":"208","line":14,"column":22,"nodeType":"200","messageId":"201","endLine":14,"endColumn":33},{"ruleId":"198","severity":1,"message":"232","line":16,"column":12,"nodeType":"200","messageId":"201","endLine":16,"endColumn":24},{"ruleId":"198","severity":1,"message":"233","line":16,"column":26,"nodeType":"200","messageId":"201","endLine":16,"endColumn":41},{"ruleId":"198","severity":1,"message":"209","line":25,"column":30,"nodeType":"200","messageId":"201","endLine":25,"endColumn":35},{"ruleId":"211","severity":1,"message":"212","line":41,"column":75,"nodeType":"213","messageId":"214","endLine":41,"endColumn":77},{"ruleId":"211","severity":1,"message":"212","line":41,"column":109,"nodeType":"213","messageId":"214","endLine":41,"endColumn":111},{"ruleId":"198","severity":1,"message":"231","line":28,"column":13,"nodeType":"200","messageId":"201","endLine":28,"endColumn":17},{"ruleId":"198","severity":1,"message":"205","line":2,"column":10,"nodeType":"200","messageId":"201","endLine":2,"endColumn":14},{"ruleId":"198","severity":1,"message":"206","line":5,"column":29,"nodeType":"200","messageId":"201","endLine":5,"endColumn":46},{"ruleId":"198","severity":1,"message":"203","line":13,"column":13,"nodeType":"200","messageId":"201","endLine":13,"endColumn":20},{"ruleId":"198","severity":1,"message":"207","line":14,"column":12,"nodeType":"200","messageId":"201","endLine":14,"endColumn":20},{"ruleId":"198","severity":1,"message":"208","line":14,"column":22,"nodeType":"200","messageId":"201","endLine":14,"endColumn":33},{"ruleId":"198","severity":1,"message":"232","line":16,"column":12,"nodeType":"200","messageId":"201","endLine":16,"endColumn":24},{"ruleId":"198","severity":1,"message":"233","line":16,"column":26,"nodeType":"200","messageId":"201","endLine":16,"endColumn":41},{"ruleId":"198","severity":1,"message":"209","line":25,"column":30,"nodeType":"200","messageId":"201","endLine":25,"endColumn":35},{"ruleId":"211","severity":1,"message":"212","line":41,"column":77,"nodeType":"213","messageId":"214","endLine":41,"endColumn":79},{"ruleId":"211","severity":1,"message":"212","line":41,"column":113,"nodeType":"213","messageId":"214","endLine":41,"endColumn":115},{"ruleId":"198","severity":1,"message":"234","line":3,"column":8,"nodeType":"200","messageId":"201","endLine":3,"endColumn":13},"no-unused-vars","'errorLink' is assigned a value but never used.","Identifier","unusedVar","'Auth' is defined but never used.","'loading' is assigned a value but never used.","'Component' is defined but never used.","'Link' is defined but never used.","'QUERY_SINGLE_USER' is defined but never used.","'showEdit' is assigned a value but never used.","'setShowEdit' is assigned a value but never used.","'error' is assigned a value but never used.","'novels' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useMutation' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'allNovels'. Either include it or remove the dependency array.","ArrayExpression",["235"],"'currentBooks' is assigned a value but never used.","'nonfictions' is assigned a value but never used.","'Redirect' is defined but never used.","'useParams' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","'showComplete' is assigned a value but never used.","'setShowComplete' is assigned a value but never used.","'React' is defined but never used.",{"desc":"236","fix":"237"},"Update the dependencies array to be: [allNovels, currentPage]",{"range":"238","text":"239"},[862,875],"[allNovels, currentPage]"]